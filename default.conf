server {
    listen     80 default_server;
    root     /opt/nginx/html;
    resolver 127.0.0.11 valid=1s ipv6=off;
    lua_ssl_trusted_certificate /etc/ssl/cert.pem;
    access_by_lua '
        local opts = {
        redirect_uri_path = os.getenv("REDIRECT_URI"),
        accept_none_alg = true,
        discovery = os.getenv("DISCOVERY"),
        client_id = os.getenv("CLIENT_ID"),
        client_secret = os.getenv("CLIENT_SECRET"),
        redirect_uri_scheme = os.getenv("REDIRECT_URI_SCHEME"),
        logout_path = os.getenv("LOGOUT_PATH"),
        redirect_after_logout_uri = os.getenv("REDIRECT_AFTER_LOGOUT_URI"),
        redirect_after_logout_with_id_token_hint = false,
        session_contents = {id_token=true},
        scope = os.getenv("SCOPES")
        }
        -- call introspect for OAuth 2.0 Bearer Access Token validation
        local res, err = require("resty.openidc").authenticate(opts)
        if err then
        ngx.status = 403
        ngx.say(err)
        ngx.exit(ngx.HTTP_FORBIDDEN)
        end
    ';

    # I disabled caching so the browser won't cache the site.
    expires           0;
    add_header        Cache-Control private;
    location / {
        set_by_lua $upstream 'return os.getenv("UPSTREAM")';
        proxy_pass  $upstream;

        proxy_buffer_size          128k;
        proxy_buffers              4 256k;
        proxy_busy_buffers_size    256k;
    }
    # redirect server error pages to the static page /40x.html
    #
    error_page 404 /404.html;
    location = /40x.html {
    }
    # redirect server error pages to the static page /50x.html
    #
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
    }
}
